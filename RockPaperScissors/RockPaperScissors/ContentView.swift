//
//  ContentView.swift
//  RockPaperScissors
//
//  Created by –ê–Ω—Ç–æ–Ω –ë–∞—Å–∫–∞–∫–æ–≤ on 26.04.2024.
//

import SwiftUI

struct ContentView: View {
    
    @State private var moves = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]
    @State private var shouldWin = Bool.random()
    @State private var move = Int.random(in: 0...2)
    @State private var score = 0
    @State private var winAlert = ""
    @State private var moveCounter = 0
    @State private var showScore = false
    @State private var showFinalScore = false
    @State private var showHelp = false
    
    var body: some View {
        ZStack {
            Color.indigo
                .ignoresSafeArea()
            VStack {
                Spacer()
                Text("""
                –°—á–µ—Ç: \(score)
                –•–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: \(moves[move])
                –£—Å–ª–æ–≤–∏–µ: \(shouldWin ? "–ü–æ–±–µ–¥–∞" : "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ")
                """)
                .multilineTextAlignment(.center)
                .shadow(radius: 10)
                .padding()
                .font(.title2)
                .foregroundStyle(.black)
                .background(.white)
                .clipShape(RoundedRectangle(cornerRadius: 40.0))
                .shadow(radius: 10)
                .padding()
                
                Button(action: {
                    buttonAction(cpuMove: "–ù–æ–∂–Ω–∏—Ü—ã")
                }, label: {
                    Text("üóø")
                })
                .font(.system(size: 100))
                .shadow(radius: 10)
                .frame(width: 200, height: 130)
                .background(.white)
                .shadow(radius: 10)
                .clipShape(RoundedRectangle(cornerRadius: 40.0))
                .padding()
                Button(action: {
                    buttonAction(cpuMove: "–ë—É–º–∞–≥–∞")
                }, label: {
                    Text("‚úÇÔ∏è")
                })
                .font(.system(size: 100))
                .shadow(radius: 10)
                .frame(width: 200, height: 130)
                .background(.white)
                .shadow(radius: 10)
                .clipShape(RoundedRectangle(cornerRadius: 40.0))
                .padding()
                Button(action: {
                    buttonAction(cpuMove: "–ö–∞–º–µ–Ω—å")
                }, label: {
                    Text("üìÑ")
                })
                .font(.system(size: 100))
                .shadow(radius: 10)
                .frame(width: 200, height: 130)
                .background(.white)
                .shadow(radius: 10)
                .clipShape(RoundedRectangle(cornerRadius: 40.0))
                .padding()
                Spacer()
                Button(action: {
                    showHelp = true
                }, label: {
                    Text("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?")
                })
                .shadow(radius: 10)
                .padding()
                .font(.title2)
                .foregroundStyle(.black)
                .background(.white)
                .clipShape(RoundedRectangle(cornerRadius: 40.0))
                .shadow(radius: 10)
                .padding()
                Spacer()
            }
            .alert("\(winAlert)", isPresented: $showScore) {
                Button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", action: askQuestion)
            } message: {
                Text("–°—á–µ—Ç: \(score)")
            }
            .alert("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", isPresented: $showFinalScore) {
                Button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", action: resetGame)
            } message: {
                Text("–§–∏–Ω–∞–ª—å–Ω—ã–π c—á–µ—Ç: \(score)")
            }
            .alert("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É?", isPresented: $showHelp) { }
        message: {
            Text("–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 —Ö–æ–¥–æ–≤. –ö–∞–∂–¥—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ–∏—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç—É –≤ –∏–≥—Ä–µ \"–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞\", –æ–¥–Ω–∞–∫–æ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ: –∏–≥—Ä–æ–∫—É –Ω—É–∂–Ω–æ –ª–∏–±–æ –≤—ã–π–≥—Ä–∞—Ç—å, –ª–∏–±–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç—É")
        }
            
        }
    }
    func buttonAction(cpuMove: String) {
        if moveCounter == 10 {
            showFinalScore = true
        }
        if shouldWin && moves[move] == cpuMove {
            winAlert = "–í–µ—Ä–Ω–æ"
            score += 1
        } else if shouldWin == false && moves[move] != cpuMove {
            winAlert = "–í–µ—Ä–Ω–æ"
            score += 1
        } else {
            if score != 0 {
                score -= 1
            }
            winAlert = "–ù–µ –≤–µ—Ä–Ω–æ"
        }
        moveCounter += 1
        showScore = true
    }
    func askQuestion() {
        shouldWin.toggle()
        moves.shuffle()
        
    }
    func resetGame() {
        showScore = false
        score = 0
        moveCounter = 0
        shouldWin.toggle()
        moves.shuffle()
    }
}

#Preview {
    ContentView()
}
